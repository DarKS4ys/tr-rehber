// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Status {
  Admin
  User
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  status        Status       @default(User)
  accounts      Account[]
  sessions      Session[]
  File          File[]
  Comment       Comment[]
  SavedPlace    SavedPlace[]
  TravelPlan    TravelPlan[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Place {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         Json
  description  Json           @map("description")
  info         Json
  videoUrl     Json
  altVideoUrl  Json?
  audioUrl     Json
  tags         Json[]
  imageUrl     String
  images       String[]
  PlaceSnippet PlaceSnippet[]
  comments     Comment[]
  SavedPlace   SavedPlace[]

  @@map("places")
}

model PlaceSnippet {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        Json
  description Json
  tags        Json[]
  images      String[]
  imageUrl    String
  placeId     String   @db.ObjectId
  place       Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@map("placesnippets")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  placeId   String   @db.ObjectId
  place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  allowed   Boolean  @default(false)

  @@map("comments")
}

model File {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId
  fileUrl     String
  downloadUrl String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Feedback {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  feedback String

  @@map("feedbacks")
}

model SavedPlace {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  placeId   String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("saved-places")
}

model TravelPlan {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String      @db.ObjectId
  name      String
  imageUrl  String?
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  PlanPlace PlanPlace[]

  @@map("travel-plans")
}

model PlanPlace {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  coordinates  Json
  name         String
  description  String
  tags         String[]
  imageUrl     String
  travelPlanId String     @db.ObjectId
  travelPlan   TravelPlan @relation(fields: [travelPlanId], references: [id], onDelete: Cascade)

  @@map("plan-places")
}
